import os
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from docx import Document
from docx.oxml.ns import qn
from docx.shared import Pt
from PyPDF2 import PdfWriter
from robot.api.deco import keyword, library
import arabic_reshaper
from bidi.algorithm import get_display


@library(doc_format='ROBOT')
class FileGenerator:
    def __init__(self):
        self.text = None
        self.extension = None
        self.output_path = None
        self.file_name = None
        project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../.."))
        self.arabic_font_path = os.path.join(project_root, "Resources", "Fonts", "amiri.ttf")
        self._setup_arabic_font()

    def _reshape_arabic_text(self, text: str) -> str:
        reshaped_text = arabic_reshaper.reshape(text)
        return get_display(reshaped_text)

    def _setup_arabic_font(self):
        """
        Set up an Arabic font using a local TTF font file.
        """
        if os.path.exists(self.arabic_font_path):
            font_prop = fm.FontProperties(fname=self.arabic_font_path)
            plt.rcParams['font.family'] = font_prop.get_name()
            plt.rcParams['font.sans-serif'] = [font_prop.get_name()]
        else:
            print(f"Warning: Arabic font file not found at {self.arabic_font_path}")
            plt.rcParams[ 'font.family' ] = 'sans-serif'
            plt.rcParams[ 'font.sans-serif' ] = [ 'DejaVu Sans' ]

    @keyword('Generate Custom New File')
    def create_file(self, extension: str, output_path: str, text: str = "Generated by Automation script",
                    file_name: str = "generated_file") -> str:
        os.makedirs(output_path, exist_ok=True)

        self.text = self._reshape_arabic_text(text)
        self.extension = extension.lower()
        self.output_path = output_path
        self.file_name = file_name
        return self._generate_file()

    def _generate_file(self) -> str:
        if self.extension == 'pdf':
            return self._generate_pdf()
        elif self.extension == 'docx':
            return self._generate_word()
        elif self.extension == 'txt':
            return self._generate_txt()
        elif self.extension in ['png', 'jpg']:
            return self._generate_image(self.extension)
        else:
            raise ValueError("Unsupported file extension!")

    def _generate_pdf(self) -> str:
        output_file = os.path.join(self.output_path, f"{self.file_name}.pdf")
        writer = PdfWriter()
        writer.add_blank_page(width=72 * 8.5, height=72 * 11)
        with open(output_file, 'wb') as f_out:
            writer.write(f_out)
        return output_file

    def _generate_word(self) -> str:
        doc = Document()
        para = doc.add_paragraph()
        run = para.add_run(self.text)
        run.bold = True
        run.font.size = Pt(18)
        para.alignment = 1

        # Set embedded font name
        if self.arabic_font_path and os.path.exists(self.arabic_font_path):
            run.font.name = 'Amiri'
            run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Amiri')

        output_file = os.path.join(self.output_path, f"{self.file_name}.docx")
        doc.save(output_file)
        return output_file

    def _generate_txt(self) -> str:
        output_file = os.path.join(self.output_path, f"{self.file_name}.txt")
        with open(output_file, "w", encoding="utf-8") as file:
            file.write(self.text)
        return output_file

    def _generate_image(self, extension: str, image_size=(800, 600)) -> str:
        plt.figure(figsize=(image_size[0] / 100, image_size[1] / 100))
        plt.text(0.5, 0.5, self.text,
                 fontsize=20,
                 ha='center',
                 va='center',
                 wrap=True,
                 fontweight='bold',
                 bbox=dict(facecolor='white', alpha=0.7))
        plt.axis('off')
        plt.gca().set_xlim(0, 1)
        plt.gca().set_ylim(0, 1)

        output_file = os.path.join(self.output_path, f"{self.file_name}.{extension}")
        output_file = output_file.replace(' ', '_')
        plt.savefig(output_file, format=extension, bbox_inches='tight', dpi=300)
        plt.close()
        return output_file
