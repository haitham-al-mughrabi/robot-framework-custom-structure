import os
import matplotlib.pyplot as plt
from docx import Document
from PyPDF2 import PdfWriter
from robot.api.deco import keyword, library


@library(doc_format='ROBOT')
class FileGenerator:
    """
    A utility class for generating files in various formats (PDF, DOCX, TXT, PNG, JPG).

    This class provides a keyword to create files with custom content in the specified format.
    It is designed to be used in Robot Framework for automated testing and file generation tasks.
    """

    def __init__(self):
        """
        Initialize the FileGenerator class with default values for text, extension, output path, and file name.
        """
        self.text = None
        self.extension = None
        self.output_path = None
        self.file_name = None

    @keyword('Generate Custom New File')
    def create_file(self, extension: str, output_path: str, text: str = "Generated by Automation script",
                    file_name: str = "generated_file") -> str:
        """
        Generate a new file with the specified extension containing the provided text.

        Supported file formats:
            - *.jpg
            - *.png
            - *.pdf
            - *.txt
            - *.docx

        Parameters:
        - extension (str): File extension indicating the format (e.g., 'pdf', 'docx', 'txt', 'png', 'jpg').
        - output_path (str): Directory where the file will be saved.
        - text (str): Content to be written in the file. Default is "Generated by Automation script".
        - file_name (str): Name of the generated file (without extension). Default is "generated_file".

        Returns:
        - str: Full path to the generated file.

        Example:
        | ${file_path}= | Generate Custom New File | pdf | /output | Hello, World! | my_file |
        | Log           | ${file_path}             |
        | # Output:     | /output/my_file.pdf      |
        """
        self.text = text
        self.extension = extension.lower()
        self.output_path = output_path
        self.file_name = file_name
        return self._generate_file()

    def _generate_file(self) -> str:
        """
        Internal method to generate the file based on the specified extension.

        Returns:
        - str: Full path to the generated file.

        Raises:
        - ValueError: If the file extension is not supported.
        """
        if self.extension == 'pdf':
            return self._generate_pdf()
        elif self.extension == 'docx':
            return self._generate_word()
        elif self.extension == 'txt':
            return self._generate_txt()
        elif self.extension in ['png', 'jpg']:
            return self._generate_image(self.extension)
        else:
            raise ValueError("Unsupported file extension!")

    def _generate_pdf(self) -> str:
        """
        Generate a PDF file with a blank page.

        Returns:
        - str: Full path to the generated PDF file.
        """
        output_file = os.path.join(self.output_path, f"{self.file_name}.pdf")
        writer = PdfWriter()
        writer.add_blank_page(width=72 * 8.5, height=72 * 11)  # 8.5x11 inches at 72 dpi
        with open(output_file, 'wb') as f_out:
            writer.write(f_out)
        # Note: Adding text to the PDF requires a more complex setup or a different library.
        return output_file

    def _generate_word(self) -> str:
        """
        Generate a Word document (DOCX) with the provided text.

        Returns:
        - str: Full path to the generated DOCX file.
        """
        doc = Document()
        para = doc.add_paragraph()
        run = para.add_run(self.text)
        run.bold = True
        run.font.size = 300000  # Set large font size (in half-points; Word uses EMUs)
        para.alignment = 1  # Center the paragraph text
        output_file = os.path.join(self.output_path, f"{self.file_name}.docx")
        doc.save(output_file)
        return output_file

    def _generate_txt(self) -> str:
        """
        Generate a plain text file (TXT) with the provided text.

        Returns:
        - str: Full path to the generated TXT file.
        """
        output_file = os.path.join(self.output_path, f"{self.file_name}.txt")
        with open(output_file, "w", encoding="utf-8") as file:
            file.write(self.text)
        return output_file

    def _generate_image(self, extension: str, image_size=(800, 600)) -> str:
        """
        Generate an image file (PNG or JPG) with the provided text.

        Parameters:
        - extension (str): Image format ('png' or 'jpg').
        - image_size (tuple): Dimensions of the image in pixels (width, height). Default is (800, 600).

        Returns:
        - str: Full path to the generated image file.
        """
        fig, ax = plt.subplots(figsize=(image_size[0] / 100, image_size[1] / 100))
        ax.text(0.5, 0.5, self.text, fontsize=20, ha='center', va='center', wrap=True)
        ax.axis('off')
        output_file = os.path.join(self.output_path, f"{self.file_name}.{extension}")
        output_file = output_file.replace(' ', '_')
        plt.savefig(output_file, format=extension, bbox_inches='tight')
        plt.close(fig)
        return output_file
